#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var walk = require('walk');
var htmlcs = require('../');
var info = require('../package.json');

var argv = require('yargs')
    .usage('Usage: $0 <command> [options] [target...]')
    .command('hint', 'Do hint given file(s)')
    .example('$0 hint -f foo.js', 'do hint the given file')
    .command('format', 'Do format given file(s)')
    .example('$0 format -f foo.js', 'do format the given file')
    .help('h')
    .alias('h', 'help')
    .epilog('copyright 2015')
    .argv;

// default op & target
var op = 'hint';
var target = './';

switch (argv._.length) {
    case 0: break;
    case 1:
        target = argv._[0];
        break;
    default:
        op = argv._[0];
        target = argv._[1];
}

var hintFile = function (filePath) {
    var result = htmlcs.hintFile(filePath);
    if (result.length) {
        result.forEach(function (item) {
            console.log('[%s] line %d, column %d: %s (%s, %s)', item.type, item.line, item.column, item.message, item.rule, item.code);
        });
    }
    else {
        console.log('Congratulations! There is no hint result.');
    }
};

try {
    switch (op) {

        case 'hint':

            var stat = fs.statSync(target);

            if (stat.isFile()) {
                hintFile(target);
                return;
            }

            if (stat.isDirectory()) {
                var walker = walk.walk(target);

                walker.on('file', function (root, fileStat, next) {
                    var filePath = path.join(root, fileStat.name);

                    if (filePath.slice(-5) !== '.html') {
                        next();
                        return;
                    }

                    console.log('*', filePath + ':\n');
                    hintFile(filePath);
                    console.log('');
                    next();
                });

                return;
            }

            return;

        case 'format':

            console.log(htmlcs.formatFile(target));
            return;

        default:
    }
}
catch (e) {
    console.log('Error:', e.message || e);
    console.log([
        '',
        ['Usage:'],
        ['\thtmlcs', 'hint', '<file>'],
        ['\thtmlcs', 'hint', '<folder>'],
        ['\thtmlcs', 'format', '<file>']
    ].map(function (line) {
        return line && line.join(' ');
    }).join('\n'));
}
